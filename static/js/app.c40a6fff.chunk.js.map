{"version":3,"sources":["Screens/Login.js","Screens/Verify.js","Components/PreVerify.js","Components/PostVerify.js","Screens/Chat.js","Components/ClientMessage.js","Components/UserMessage.js","Components/Loading.js","Components/WelcomeMessage.js","Screens/Signup.js","Components/Spot.js","Components/AddSpot.js","Screens/Channels.js","App.js"],"names":["magicToken","param","vars","window","location","search","substring","split","i","length","pair","getParam","Style","StyleSheet","create","main","flex","backgroundColor","width","height","justifyContent","alignItems","content","logo","color","fontSize","fontWeight","authText","fontWeigth","form","fieldTitle","marginBottom","Input","padding","textAlign","errorView","errorMsg","fontStyle","buttonSection","button","buttonText","signupNav","signupText","Login","navigation","useState","email","setEmail","password","setPassword","setErrorMsg","handleLogin","data","JSON","stringify","response","fetch","method","body","headers","ok","jsonResponse","json","renderResponse","errorMessage","message","error","console","log","global","token","authToken","navigate","toSpot","style","accessibilityRole","onChangeText","value","secureTextEntry","onPress","Verify","handleVerify","getResponse","preMain","successIcon","preTitle","lineHeight","preText","PreVerify","postMain","postTitle","postRedirect","PostVerify","client","channel","username","marginRight","marginTop","messageView","borderRadius","alignSelf","marginLeft","ClientMsg","props","View","Text","userName","msg","flexWrap","UserMsg","loadingView","paddingVertical","loadingText","Loading","topView","titleWelcome","title","titleOwner","centerMessage","bottomView","buttonCreateSpot","createSpotText","buttonQuestionFeedback","questionFeedbackText","Welcome","owner","TouchableOpacity","handlePressSpot","handlePressQuest","url","spotQuery","Ably","require","top","flexDirection","header","subtitle","usersView","usersNumber","usersLetter","chatContainer","marginVertical","bottomContainer","backButton","backArrow","backButtonText","inputView","textInput","inputButton","inputButtonText","Chat","route","input","setInput","msgHistory","setMsgHistory","setUsername","setUserId","ablyToken","setAblyToken","spotTitle","setSpotTitle","spotDescription","setSpotDescription","spotOwner","setSpotOwner","loading","setLoading","members","setMembers","id","params","scrollViewRef","useRef","fetchUser","getSpot","refreshToken","endpoint","renderSpotData","user","name","description","useEffect","connect","Realtime","authCallback","tokenParams","callback","connection","on","getChannel","channels","get","occupancy","getHistory","subscribe","metrics","membersCount","connections","previous","msgsHistory","history","err","messagesPage","messages","items","unshift","handleClose","close","Math","floor","ScrollView","ref","onContentSizeChange","current","scrollToEnd","animated","FlatList","renderItem","item","cont","keyExtractor","TextInput","placeholder","lastMessageUser","lastMessageId","publish","loginNav","loginText","Signup","setName","confirmPass","setConfirmPass","Topic","topicMain","topicText","topic","spotMain","spotSub","spotArrowView","spotArrow","Spot","destination","AddButton","addButton","handlePress","addButtonIcon","addButtonText","CancelButton","cancelButton","cancelButtonIcon","cancelButtonText","NextButton","nextButton","nextButtonIcon","nextButtonText","DoneButton","doneButton","doneButtonIcon","doneButtonText","SpotTitle","addMain","titleInput","changeText","handleCancel","handleNext","SpotDescription","descriptionInput","SpotTopic","topicInput","handleDone","alignContent","marginBotton","addSpotMain","logoutButton","logoutText","flatList","Channels","spotList","setSpotList","inputErrorMsg","setInputErrorMsg","setFetchErrorMsg","showTitle","setShowTitle","showDescription","setShowDescription","showTopic","setShowTopic","setTitle","setDescription","setTopic","fetchSpots","renderResponseSpotList","addSpot","renderResponseAddSpot","newSpotId","chatroom","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","initialRouteName","screenOptions","headerShown","Screen","component"],"mappings":"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","file":"static/js/app.c40a6fff.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {View, Text, TextInput, TouchableOpacity, StyleSheet} from 'react-native';\n\n// Backend call to log in user //\nconst url = \"https://x8ki-letl-twmt.n7.xano.io/api:i1afkiPC\";\nconst query = \"/auth/login\";\n\n// Function to get parameter from url address //\nconst getParam = (param) => {\n    const query = window.location.search.substring(1);\n    const vars = query.split(\"&\");\n    for (let i = 0; i < vars.length; i++) {\n        let pair = vars[i].split(\"=\");\n        if (pair[0] === param) {\n            return pair[1];\n        }\n    }\n    return(false);\n};\nconst magicToken = getParam(\"token\");\n\n// Login Component //\nconst Login = ({navigation}) => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [errorMsg, setErrorMsg] = useState(\"\");\n\n    // Function Calling Backend endpoint //\n    const handleLogin = async () => {\n        if (email && password) {\n        const endpoint = `${url}${query}`;\n        const data = JSON.stringify({\"email\": email, \"password\": password});\n        try {\n            const response = await fetch(endpoint, {\n                method: \"POST\",\n                body: data,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (response.ok) {\n                const jsonResponse = await response.json();\n                setEmail(\"\");\n                setPassword(\"\");\n                setErrorMsg(\"\");\n                renderResponse(jsonResponse)\n            } else {\n                const errorMessage = await response.json();\n                setErrorMsg(errorMessage.message);\n            };\n        }\n        catch (error) {\n            console.log(error);\n        }} else {\n            setErrorMsg(\"All fields must be completed\")\n        };\n    };\n\n    const renderResponse = (response) => {\n        global.token = response.authToken;\n        navigation.navigate(\"Channels\", {toSpot: false});\n    };\n\n    // Function to Autodirect to Verification page after email verification//\n    const goToVerify = () => {\n        navigation.navigate(\"Verify\")\n    };\n\n    return (\n        <>\n            { magicToken ? goToVerify() :\n                <View style={Style.main}>\n                    <View \n                        style={Style.content} \n                        accessibilityRole=\"form\">\n                            <Text style={Style.logo}>Spot</Text>\n                            <Text style={Style.authText}>Log in</Text>\n                            <View style={Style.form}>\n                                <Text style={Style.fieldTitle}>Email</Text>\n                                <TextInput \n                                    style={Style.Input}\n                                    onChangeText={setEmail}\n                                    value={email} />\n                                <Text style={Style.fieldTitle}>Password</Text>\n                                <TextInput \n                                    style={Style.Input}\n                                    secureTextEntry={true}\n                                    onChangeText={setPassword}\n                                    value={password} />\n                                <View style={Style.errorView}>\n                                    {errorMsg ? \n                                        <Text style={Style.errorMsg}>{errorMsg}</Text>\n                                        :\n                                        null}\n                                </View>\n                            </View>\n                            <View style={Style.buttonSection}>\n                                <TouchableOpacity \n                                    style={Style.button}\n                                    onPress={handleLogin}>\n                                        <Text style={Style.buttonText}>Log in</Text>\n                                </TouchableOpacity>\n                                <TouchableOpacity \n                                    style={Style.signupNav}\n                                    onPress={() => navigation.navigate(\"Signup\")}>\n                                        <Text style={Style.signupText}>Signup</Text>\n                                </TouchableOpacity>\n                            </View>\n                    </View>\n                </View>\n            }\n        </>\n    )\n};\n\n// Styles //\nconst Style = StyleSheet.create ({\n    main: {\n        flex: 1, \n        backgroundColor: 'black', \n        width: '100%', \n        height: '100%', \n        justifyContent: 'center', \n        alignItems: 'center'\n    },\n        content: {\n            alignItems: 'center', \n            width: '60%', \n            height: '70%'\n        },\n            logo: {\n                flex: 1, \n                color: 'grey', \n                fontSize: 55, \n                fontWeight: 100\n            },\n\n            authText: {\n                color: 'grey',\n                fontSize: 28,\n                fontWeigth: 400\n            },\n\n            form: {\n                flex: 5, \n                justifyContent: 'center', \n                alignItems: 'center'\n            },\n                fieldTitle: {\n                    color: 'grey', \n                    fontSize: 14, \n                    fontWeight: 300, \n                    marginBottom: 8\n                },\n                    Input: {\n                        width: 175, \n                        height: 40, \n                        backgroundColor: 'grey',\n                        padding: 8,\n                        textAlign: 'center',\n                        marginBottom: 14\n                    },\n\n            errorView: {\n                flex: 0.2\n            },\n                errorMsg: {\n                    color: 'red',\n                    fontSize: 11,\n                    fontStyle: \"italic\"\n                },\n\n            buttonSection: {\n                flex: 0.6, \n                justifyContent: 'center', \n                alignItems: 'center'\n            },\n                button: {\n                    justifyContent: 'center', \n                    alignItems: 'center', \n                    width: 230, \n                    height: 60, \n                    backgroundColor: 'lightblue',\n                    marginBottom: 26 \n                },\n                    buttonText: {\n                        color: 'black', \n                        fontSize: 25, \n                        fontWeight: 300\n                    },\n\n            signupNav: {\n                padding: 8, \n                justifyContent: \"center\", \n                alignItems: \"center\"\n            },\n                signupText: {\n                    color: \"grey\", \n                    fontSize: 14, \n                    fontWeight: \"700\"\n                }\n\n});\n\nexport default Login;\n","import React, { useState, useEffect } from 'react';\nimport {View, Text, TouchableOpacity} from 'react-native';\nimport PreVerify from '../Components/PreVerify.js'\nimport PostVerify from '../Components/PostVerify.js'\n\n// Backend endpoint for verifing email //\nconst url = \"https://x8ki-letl-twmt.n7.xano.io/api:i1afkiPC\";\nconst query = \"/auth/verify_email/magic_login\";\n\n// Function to get parameter from url address //\nconst getParam = (param) => {\n    const query = window.location.search.substring(1);\n    const vars = query.split(\"&\");\n    for (let i = 0; i < vars.length; i++) {\n        let pair = vars[i].split(\"=\");\n        if (pair[0] === param) {\n            return pair[1];\n        }\n    }\n    return(false);\n};\nconst magicToken = getParam(\"token\");\n\n// Verify component //\nconst Verify = ({navigation}) => {\n\n    // Function to call Backend and send token for verification //\n    const handleVerify = async () => {\n        const endpoint = `${url}${query}`;\n        const data = JSON.stringify({\"magic_token\": magicToken});\n        try {\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                body: data,\n                headers: {\n                    'Content-Type': \"application/json\",\n                }\n            });\n            if (response.ok) {\n                const jsonResponse = await response.json();\n                getResponse(jsonResponse);\n            }\n        }\n        catch (error) {\n            console.log(error)\n        }\n    };\n\n    // Handling response form Backend //\n    const getResponse = (response) => {\n        global.token = response.authToken;\n        navigation.navigate(\"Channels\", {toSpot: false});\n    };\n\n    // Conditional to call Backend Verification function //\n    if (magicToken === false) {\n        console.log(\"no token\");\n    } else {\n        handleVerify();\n    };\n\n    return (\n        <View style={{flex: 1}}>\n            {magicToken === false ? \n                <PreVerify /> : <PostVerify /> \n            }\n        </View>\n    )\n};\n\n// Styles //\nexport default Verify;\n","import React from 'react';\nimport {View, Text, StyleSheet} from 'react-native';\n\n// Email verification component, before verification //\nconst PreVerify = () => {\n    return (\n        <View style={Style.preMain}>\n            <Text style={Style.successIcon}>✔︎</Text>\n            <Text style={Style.preTitle}>Sign up successful. Please check your email to continue.</Text>\n            <Text style={Style.preText}>If you can't find a verification email from Spot, check you Spam of Promotion folders.</Text>\n        </View>\n    )\n};\n\n// Styles //\nconst Style = StyleSheet.create ({\n\n    preMain: {\n        flex: 1, \n        justifyContent: 'center', \n        alignItems: 'center', \n        width: '100%', \n        height: '100%', \n        padding: 95, \n        backgroundColor: 'black'\n    },\n        successIcon: {\n            color: 'white', \n            fontSize: 34, \n            marginBottom: 20\n        },\n        preTitle: {\n            color: 'white', \n            textAlign: 'center', \n            fontSize: 16, \n            fontWeight: 300, \n            lineHeight: 22, \n            marginBottom: 16\n        },\n        preText: {\n            color: 'grey', \n            textAlign: 'center', \n            fontSize: 12, \n            fontWeight: 300,\n            lineHeight: 18\n        }\n\n});\n\n\nexport default PreVerify;\n","import React from 'react';\nimport {View, Text, StyleSheet} from 'react-native';\n\n// Email verification component, after verification //\nconst PostVerify = () => {\n    return (\n        <View style={Style.postMain}>\n            <Text style={Style.successIcon}>✔︎</Text>\n            <Text style={Style.postTitle}>Thank you for verifying your email.</Text>\n            <Text style={Style.postRedirect}>Redirecting...</Text>\n        </View>\n    )\n};\n\n// Styles //\nconst Style = StyleSheet.create ({\n\n    postMain: {\n        flex: 1, \n        justifyContent: 'center', \n        alignItems: 'center', \n        width: '100%', \n        height: '100%', \n        padding: 95, \n        backgroundColor: 'black'\n    },\n        successIcon: {\n            color: 'green', \n            fontSize: 34, \n            marginBottom: 20\n        },\n        postTitle: {\n            color: 'white', \n            textAlign: 'center', \n            fontSize: 18, \n            fontWeight: 300, \n            lineHeight: 22, \n            marginBottom: 16\n        },\n        postRedirect: {\n            color: 'grey', \n            textAlign: 'center', \n            fontSize: 14, \n            fontWeight: 300,\n            lineHeight: 18\n        }\n\n});\n\nexport default PostVerify;\n","import React, {useState, useEffect, useRef} from 'react';\nimport {View, Text, TextInput, FlatList, TouchableOpacity, StyleSheet, ScrollView} from 'react-native';\nimport ClientMsg from '../Components/ClientMessage.js';\nimport UserMsg from '../Components/UserMessage.js';\nimport Loading from '../Components/Loading.js';\nimport Welcome from '../Components/WelcomeMessage.js'\n\n// Backend Token & Spot query endpoint //\nconst url = \"https://x8ki-letl-twmt.n7.xano.io/api:i1afkiPC\";\nconst tokenQuery = \"/auth/token\";\nconst spotQuery = /chatrooms/;\n\n// Requiring Ably to enable Chat service connection //\nconst Ably = require('ably');\n\n// Ably variables //\nlet \nclient, \nchannel\n\n// Chat component //\nconst Chat = ({route, navigation}) => {\n    const [input, setInput] = useState(\"\");\n    const [msgHistory, setMsgHistory] = useState(\"\");\n    const [username, setUsername] = useState(null);\n    const [userId, setUserId] = useState(null);\n    const [ablyToken, setAblyToken] = useState(null);\n    const [errorMsg, setErrorMsg] = useState(null);\n    const [spotTitle, setSpotTitle] = useState(null);\n    const [spotDescription, setSpotDescription] = useState(null);\n    const [spotOwner, setSpotOwner] = useState(\"\");\n    const [loading, setLoading] = useState(true);\n    const [members, setMembers] = useState(\"\");\n    const {id} = route.params;\n    const scrollViewRef = useRef();\n\n    // Call to Backend for logged user data, Ably token and calling Spot Query function //\n    const fetchUser = async () => {\n        const endpoint = `${url}${tokenQuery}`;\n        try {\n            const response = await fetch(endpoint, {\n                method : \"GET\",\n                headers: {\n                    \"accept\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                }\n            })\n            if (response.ok) {\n                const jsonResponse = await response.json();\n                renderResponse(jsonResponse);\n                getSpot();\n            } else {\n                const errorMessage = await response.json();\n                setErrorMsg(errorMessage.message);\n                console.log(`Not able to connect. Try again later.`)\n            }\n        }\n        catch (error) {\n            console.log(error);\n        }\n    };   \n        \n    // Call to Backend to refresh Ably Token before expiring //\n    const refreshToken = async () => {\n        const endpoint = `${url}${tokenQuery}`;\n        try {\n            const response = await fetch(endpoint, {\n                method : \"GET\",\n                headers: {\n                    \"accept\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                }\n            })\n            if (response.ok) {\n                const jsonResponse = await response.json();\n                return jsonResponse.ablyToken\n            }\n        }\n        catch (error) {\n            console.log(error);\n        }\n    };\n\n    // Function to call to Backend to get Spot data ----- //\n    const getSpot = async () => {\n        const endpoint = `${url}${spotQuery}${id}`;\n        try {\n            const response = await fetch(endpoint, {\n                method : \"GET\",\n                headers: {\n                    \"accept\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                }\n            })\n            if (response.ok) {\n                const jsonResponse = await response.json();\n                renderSpotData(jsonResponse);\n            }\n        }\n        catch (error) {\n            console.log(error);\n        }\n    };\n\n    // Function to set user name //\n    const renderResponse = (response) => {\n        setUsername(response.user.name);\n        setUserId(response.user.id);\n        setAblyToken(response.ablyToken);\n    };\n\n    // Function to set Spot data //\n    const renderSpotData = (response) => {\n        setSpotTitle(response.title);\n        setSpotDescription(response.description);\n        setSpotOwner(response.owner.name)\n    }\n\n    // Calling function to query endpoint on first render //\n    useEffect(() => {\n        fetchUser();\n    }, []);\n\n    // Calling function for Connection, Retrieving Channel, Previous History & Messages Subscription //\n    useEffect(() => {\n        connect();\n    }, [ablyToken]);\n    \n    // ---------- Calling Ably Chat Connection Function ---------- //\n    const connect = () => {\n        if (ablyToken !== null) {\n            client = new Ably.Realtime({authCallback: async (tokenParams, callback) => {\n                try {\n                    const tokenRequest = await refreshToken();\n                    callback(null, tokenRequest)\n                }\n                catch (error) {\n                    callback(error, null)\n                }\n            }});\n            // Client connection //\n            client.connection.on('connected', () => {\n            console.log(`${username} has connected to Ably Realtime!`);\n            // Channel Function call //\n            getChannel(client);\n            });\n        }\n    };\n\n    // Calling Channel Function for Retrieving Channel //\n    const getChannel = (client) => {\n        let channelOpts = {params: {occupancy: 'metrics.connections'}};\n        channel = client.channels.get(id, channelOpts);\n        console.log(`${username} has subscribed to channel ${id}!`); \n        // History Function call //\n        getHistory(channel); \n        // Subscribing to Channel Messages //\n        channel.subscribe(message => {\n            // Sorting Ocuppancy data from incoming messages, and push last incoming message to History array //\n            if (!message.data.metrics) {\n                setMsgHistory((previous) => [...previous, message])\n            } else {\n                setMembers(membersCount(message.data.metrics.connections));\n            }\n        });\n    };\n\n    // History Function called from Channel retrieval //\n    let msgsHistory = [];\n    const getHistory = (channel) => {\n        channel.history((err, messagesPage) => {\n            let messages = messagesPage.items;\n            for (let i = 0; i < messages.length; i++) {\n                msgsHistory.unshift(messages[i])\n            };\n            // Setting Previous History Array //\n            setMsgHistory(msgsHistory);\n            setLoading(false);\n        });\n    };\n    // Sending Messages to channel //\n    const sendMessage = () => {\n        // Identifying follow up messages to remove username //\n        let lastMessageId = msgHistory.length - 1;\n        let lastMessageUser;\n        if (msgHistory.length !== 0) {\n            lastMessageUser = msgHistory[lastMessageId].data.user;\n        };\n        // Conditional assigning values to help sorting messages from logged in user from external users //\n        if (username === lastMessageUser) {\n            channel.publish(\"new-message\", {user: username, message: input, cont: true});\n        } else {\n            channel.publish(\"new-message\", {user: username, message: input, cont: false});\n        }\n        setInput(\"\")\n    };\n\n    // Function to Close Ably Connection //\n    const handleClose = () => {\n        client.close();\n        console.log(\"Connection ended!\");\n        navigation.navigate(\"Channels\", {token})\n    };\n\n    // Function closing connection when clicking \"Add spot\" link and navigation out //\n    const handleAddSpot = () => {\n        handleClose();\n        navigation.navigate(\"Channels\", {toSpot: false});\n    };\n\n    // Function closing connection when clicking \"Ask question\" link and navigating out //\n    const handleAskQuest = () => {\n        handleClose();\n        navigation.navigate(\"Channels\", {toSpot: true});\n    };\n\n    // Function for for rounding members connections number and assigning relative string //\n    const membersCount = (members) => {\n        if (members > 0 && members <= 1) {\n            return members + \" person present\";\n        } else if (members >= 2 && members <= 999) {\n            return members + \" people present\";\n        } else if (members >= 1000 && members <= 999999) {\n            return Math.floor(members / 1000) + \"k people present\";\n        } else if (members >= 1000000 && members <= 999999999) {\n            return Math.floor(members / 1000000) + \"m people present\";\n        } else if (members >= 1000000000 && members <= 999999999999) {\n            return Math.floor(members / 1000000000) + \"b people present\";\n        } else {\n            return null;\n        }\n    };\n \n    // Function for rendering according to logged-in user and if message is a follow-up from same user //\n    const renderItem = ({item}) => (\n        item.data.cont === true ?\n            username === item.data.user ?\n                <ClientMsg\n                    key={item.id}\n                    msg={item.data.message}/>\n                : \n                <UserMsg\n                    key={item.id}\n                    msg={item.data.message}/>\n            :\n            username !== item.data.user ?\n                <UserMsg\n                    key={item.id}\n                    userName={item.data.user} \n                    msg={item.data.message}/>\n                    : \n                <ClientMsg\n                    key={item.id}\n                    userName={item.data.user} \n                    msg={item.data.message}/>\n    );\n\n\n    // Rendering Component //\n    return (\n    <View style={Style.main}>\n        <View style={Style.top}>\n            <View style={Style.header}>\n                <Text style={Style.title}>{spotTitle}</Text>\n                <Text style={Style.subtitle}>{spotDescription}</Text>\n            </View>\n            <View style={Style.usersView}>\n                <Text style={Style.usersNumber}>{members}</Text>\n            </View>\n        </View>\n        <ScrollView\n            style={Style.chatContainer}\n            ref={scrollViewRef}\n            onContentSizeChange={() => scrollViewRef.current.scrollToEnd({animated: true})}>\n            {msgHistory.length !== 0?\n                <FlatList \n                    data={msgHistory}\n                    renderItem={renderItem}\n                    keyExtractor={item => item.id}/>\n                : loading === true ? \n                <Loading /> \n                : <Welcome \n                    title={spotTitle}\n                    owner={spotOwner}\n                    handlePressSpot={handleAddSpot}\n                    handlePressQuest={handleAskQuest}/>\n            }\n        </ScrollView>\n        <View style={Style.bottomContainer}>\n            <TouchableOpacity \n                style={Style.backButton}\n                onPress={handleClose}>\n                    <Text style={Style.backArrow}>⌌</Text>\n                    <Text style={Style.backButtonText}>Back</Text>\n            </TouchableOpacity>\n            <View style={Style.inputView}>\n                <TextInput \n                    style={Style.textInput}\n                    onChangeText={setInput}\n                    placeholder=\"Type your message...\"\n                    value={input} />\n                <TouchableOpacity style={Style.inputButton} \n                    onPress={sendMessage}>\n                        <Text style={Style.inputButtonText}>Send</Text>\n                </TouchableOpacity>\n            </View>\n         </View>\n    </View>\n    );\n};\n\n\n// ----- Styles ----- //\n\nconst Style = StyleSheet.create ({\n    main: {\n        flex: 1, \n        backgroundColor: 'black', \n        alignItems: 'stretch',\n        padding: 16\n    },\n        top: {\n            width: '100%', \n            alignItems: 'flex-end',\n            flexDirection: 'row',\n            justifyContent: 'space-between'\n        },\n            header: {\n                flex: 1,\n                justifyContent: 'flex-start',\n                marginTop: 4\n            },\n                title: {\n                    fontSize: 34,\n                    lineHeight: 36,\n                    fontWeight: 100, \n                    color: 'grey',\n                    marginBottom: 4\n                },\n                subtitle: {\n                    color: 'grey'\n                },\n            usersView: {\n                width: 90, \n                height: 50, \n                justifyContent: \"flex-end\"\n            },\n                usersNumber: {\n                    color: 'grey', \n                    fontSize: 11, \n                    textAlign: \"right\", \n                },\n                    usersLetter: {\n                        fontSize: 14, \n                        fontWeight: 500\n                    },\n\n\n        chatContainer: {\n            flex: 1, \n            marginVertical: 16\n        },\n\n        bottomContainer: {\n            width: \"100%\", \n            flexDirection: 'row'\n        },\n            backButton: {\n                width: 50, \n                height: 50, \n                backgroundColor: 'grey' \n            },\n            backArrow: {\n                fontSize: 30,\n                lineHeight: 20,\n                fontWeight: 800,\n            },\n            backButtonText: {\n                fontSize: 14, \n                fontWeight: 600,\n                alignSelf: \"center\",\n                marginTop: 6\n            },\n            \n            inputView: {\n                flexDirection: 'row', \n                flex: 1,\n                height: 50, \n            }, \n                textInput: {\n                    width: '100%', \n                    height: '100%', \n                    backgroundColor: 'grey', \n                    marginLeft: 4, \n                    padding: 8\n                },\n                inputButton: {\n                    justifyContent: 'center', \n                    alignItems: 'center', \n                    width: 100, \n                    height: 50, \n                    backgroundColor: 'lightblue', \n                    alignSelf: 'right', \n                },\n                    inputButtonText: {\n                        fontSize: 16,\n                        color: 'black',\n                        fontWeight: 600\n                    }\n});\n\nexport default Chat;\n","import React from 'react';\nimport {View, Text, StyleSheet} from 'react-native';\n\n// Client Message component //\nconst ClientMsg = (props) => {\n    return (\n        <View style={Style.main}>\n            <Text style={Style.username}>{props.userName}</Text>\n            <View style={Style.messageView}>\n                <Text style={Style.message}>{props.msg}</Text>\n            </View>\n        </View>\n    )\n};\n\n// Styles //\nconst Style = StyleSheet.create ({\n\n    main: {\n        width: '100%', \n    },\n        username: {\n            fontSize: 12, \n            color: 'grey', \n            textAlign: 'right', \n            marginRight: 12, \n            marginTop: 4,\n            marginBottom: 4\n        },\n        messageView: {\n            backgroundColor: 'lightblue',\n            borderRadius: 8, \n            alignSelf: 'flex-end', \n            marginLeft: 72, \n        },\n            message: {\n                padding: 12, \n                textAlign: 'right'\n            },\n\n})\nexport default ClientMsg;\n","import React from 'react';\nimport {View, Text, StyleSheet} from 'react-native';\n\n// External User Message component //\nconst UserMsg = (props) => {\n    return (\n    <View style={Style.main}>\n        <Text style={Style.username}>{props.userName}</Text>\n        <View style={Style.messageView}>\n            <Text style={Style.message}>{props.msg}</Text>\n        </View>\n    </View>\n    )\n};\n\n// Style //\nconst Style = StyleSheet.create ({\n\n    main: {\n        width: '100%', \n    },\n        username: {\n            fontSize: 12, \n            color: 'grey', \n            textAlign: 'left', \n            marginLeft: 12, \n            marginTop: 6,\n            marginBottom: 4\n        },\n        messageView: {\n            backgroundColor: 'grey', \n            borderRadius: 8, \n            alignSelf: 'flex-start',\n            flexWrap: 'wrap', \n            marginRight: 72, \n        },\n            message: {\n                padding: 12, \n                textAlign: 'left'\n            },\n    \n});\n\nexport default UserMsg;\n","import React from 'react';\nimport {View, Text, TouchableOpacity, StyleSheet} from 'react-native';\n\n// Loading status component //\nconst Loading = () => {\n    return (\n        <View style={Style.loadingView}>\n            <Text style={Style.loadingText}>Loading...</Text>\n        </View>\n    )\n};\n\n// Styles //\nconst Style = StyleSheet.create({\n\n    loadingView: {\n        flex: 1, \n        backgroundColor: 'black', \n        justifyContent: 'center', \n        alignItems: 'center', \n        paddingVertical: 146\n    },\n        loadingText: {\n            color: 'white'\n        },\n\n})\n\nexport default Loading;\n","import React from 'react';\nimport {View, Text, TouchableOpacity, StyleSheet} from 'react-native';\n\n// Welcome Component for Spot when no messages present //\nconst Welcome = (props) => {\n    return (\n        <View style={Style.main}>\n            <View style={Style.topView}>\n                <Text style={Style.titleWelcome}>Welcome to</Text>\n                <Text style={Style.title}>{props.title}</Text>\n                <Text style={Style.titleOwner}>by {props.owner}</Text>\n            </View>\n            <Text style={Style.centerMessage}>Start writing on the field at the bottom. Messages will dissappear after 24 hours, make sure to come back often.</Text>\n            <View style={Style.bottomView}>\n                <TouchableOpacity \n                    style={Style.buttonCreateSpot}\n                    onPress={props.handlePressSpot}>\n                        <Text style={Style.createSpotText}>Create your own Spot</Text>\n                </TouchableOpacity>\n                <TouchableOpacity \n                    style={Style.buttonQuestionFeedback}\n                    onPress={props.handlePressQuest}>\n                        <Text style={Style.questionFeedbackText}>Ask question or leave feedback</Text>\n                </TouchableOpacity>            \n            </View>\n        </View>\n    )\n};\n\n// Styles //\nconst Style = StyleSheet.create ({\n\n    main: {\n        flex: 1,\n        justifyContent: 'center', \n        alignItems: 'center', \n        backgroundColor: 'black', \n        padding: 80\n    },\n        topView: {\n            alignItems: 'center', \n            marginBottom: '35%'\n        },\n            titleWelcome: {\n                color: 'grey', \n                textAlign: 'center', \n                marginBottom: 16\n            },\n            title: {\n                color: 'white', \n                textAlign: 'center', \n                fontSize: 36, \n                fontWeight: 300, \n                marginBottom: 4\n            },\n            titleOwner: {\n                color: 'grey', \n                textAlign: 'center', \n                fontSize: 18\n            },\n\n    centerMessage: {\n        color: 'grey', \n        textAlign: 'center', \n        fontStyle: 'italic', \n        fontSize: 14, \n        lineHeight: 22, \n        marginBottom: '35%'\n    },\n    \n    bottomView: {\n        alignItems: 'center'\n    },\n    buttonCreateSpot: {\n        height: 35, \n        justifyContent: 'center', \n        padding: 8, \n        marginBottom: 2\n    },\n        createSpotText: {\n            color: 'white', \n            textAlign: 'center', \n            fontSize: 12, \n            fontWeight: 500\n        },\n    buttonQuestionFeedback: {\n        height: 35, \n        justifyContent: 'center', \n        padding: 8\n    },\n        questionFeedbackText: {\n            color: 'white', \n            textAlign: 'center', \n            fontSize: 12, \n            fontWeight: 500\n        }\n\n});\n\nexport default Welcome;\n","import React, {useState} from 'react';\nimport {View, Text, TextInput, TouchableOpacity, StyleSheet} from 'react-native';\n\n// Backend call to Sign up user //\nconst url = \"https://x8ki-letl-twmt.n7.xano.io/api:i1afkiPC\";\nconst query = \"/auth/verify_email/signup\";\n\n// Signup Component //\nconst Signup = ({navigation}) => {\n    const [email, setEmail] = useState(\"\");\n    const [name, setName] = useState(\"\")\n    const [password, setPassword] = useState(\"\");\n    const [confirmPass, setConfirmPass] = useState(\"\");\n    const [errorMsg, setErrorMsg] = useState(\"\");\n\n    // Function to call Backend endpoint //\n    const handleLogin = async () => {\n        if (password !== confirmPass) {\n            setErrorMsg(\"Passwords must match\");\n            return;\n        }\n        if (name && email && password && confirmPass) {\n        const endpoint = `${url}${query}`;\n        const data = JSON.stringify({\"name\": name, \"email\": email, \"password\": password});\n        try {\n            const response = await fetch(endpoint, {\n                method: \"POST\",\n                body: data,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (response.ok) {\n                setName(\"\");\n                setEmail(\"\");\n                setPassword(\"\");\n                setConfirmPass(\"\");\n                setErrorMsg(\"\")\n                navigation.navigate(\"Verify\");\n            } else {\n                const errorMessage = await response.json();\n                setErrorMsg(errorMessage.message);\n            };\n        }\n        catch (error) {\n            console.log(error);\n        }} else {\n            setErrorMsg(\"All fields must be completed.\")\n        }\n    };\n\n    return (\n        <View \n            style={Style.main} \n            accessibilityRole=\"form\">\n                <View style={Style.content} >\n                    <Text style={Style.logo}>Spot</Text>\n                    <Text style={Style.authText}>Sign up</Text>\n                    <View style={Style.form}>\n                        <Text style={Style.fieldTitle}>Name</Text>\n                        <TextInput \n                            style={Style.Input}\n                            onChangeText={setName}\n                            value={name} />\n                        <Text style={Style.fieldTitle}>Email</Text>\n                        <TextInput \n                            style={Style.Input}\n                            onChangeText={setEmail}\n                            value={email} />\n                        <Text style={Style.fieldTitle}>Password</Text>\n                        <TextInput \n                            style={Style.Input}\n                            secureTextEntry={true}\n                            onChangeText={setPassword}\n                            value={password} />\n                        <Text style={Style.fieldTitle}>Confirm password</Text>\n                        <TextInput \n                            style={Style.Input}\n                            secureTextEntry={true}\n                            onChangeText={setConfirmPass}\n                            value={confirmPass} />\n                        <View style={Style.errorView}>\n                            {errorMsg ? \n                                <Text style={Style.errorMsg}>{errorMsg}</Text>\n                                :\n                                null}\n                        </View>\n                    </View>\n                    <View style={Style.buttonSection}>\n                        <TouchableOpacity \n                            style={Style.button}\n                            onPress={handleLogin}>\n                                <Text style={Style.buttonText}>Sign up</Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity \n                            style={Style.loginNav}\n                            onPress={() => navigation.navigate(\"Login\")}>\n                                <Text style={Style.loginText}>Log in</Text>\n                        </TouchableOpacity>\n                    </View>\n            </View>\n        </View>\n    )\n};\n\n// Styles //\n\nconst Style = StyleSheet.create ({\n    main: {\n        flex: 1, \n        backgroundColor: 'black', \n        width: '100%', \n        height: '100%', \n        justifyContent: 'center', \n        alignItems: 'center'\n    },\n        content: {\n            alignItems: 'center', \n            width: '60%', \n            height: '70%'\n        },\n            logo: {\n                flex: 1, \n                color: 'grey', \n                fontSize: 55, \n                fontWeight: 100\n            },\n\n            authText: {\n                color: 'grey',\n                fontSize: 28,\n                fontWeigth: 400\n            },\n\n            form: {\n                flex: 5, \n                justifyContent: 'center', \n                alignItems: 'center'\n            },\n                fieldTitle: {\n                    color: 'grey', \n                    fontSize: 14, \n                    fontWeight: 300, \n                    marginBottom: 8\n                },\n                    Input: {\n                        width: 175, \n                        height: 40, \n                        backgroundColor: 'grey',\n                        padding: 8,\n                        textAlign: 'center',\n                        marginBottom: 14\n                    },\n\n            errorView: {\n                flex: 0.2\n            },\n                errorMsg: {\n                    color: 'red',\n                    fontSize: 11,\n                    fontStyle: \"italic\"\n                },\n\n            buttonSection: {\n                flex: 0.6, \n                justifyContent: 'center', \n                alignItems: 'center'\n            },\n                button: {\n                    justifyContent: 'center', \n                    alignItems: 'center', \n                    width: 230, \n                    height: 60, \n                    backgroundColor: 'lightblue', \n                    marginBottom: 26 \n                },\n                    buttonText: {\n                        color: 'black', \n                        fontSize: 25, \n                        fontWeight: 300\n                    },\n\n            loginNav: {\n                padding: 8, \n                justifyContent: \"center\", \n                alignItems: \"center\"\n            },\n                loginText: {\n                    color: \"grey\", \n                    fontSize: 14, \n                    fontWeight: \"700\"\n                }\n\n});\n\nexport default Signup;\n","import React from 'react';\nimport {View, Text, TouchableOpacity, StyleSheet} from 'react-native';\n\n// Topic Element component //\nconst Topic = (props) => {\n    return (\n        <View style={Style.topicMain}>\n            <Text style={Style.topicText}>{props.topic}</Text>\n        </View>\n    )\n};\n\n// Spot Component //\nconst Spot = (props) => {\n    return (\n    <TouchableOpacity \n        style={Style.spotMain}\n        onPress={props.destination}>\n        <View style={Style.spotDescription}>\n            <Text style={Style.spotTitle}>{props.title}</Text>\n            <Text style={Style.spotSub}>{props.subtitle}</Text>\n            <Topic topic={props.topic}/>\n        </View>\n        <View style={Style.spotArrowView}>\n            <Text style={Style.spotArrow}>⌍</Text>\n        </View>\n    </TouchableOpacity>\n    )\n};\n\n// Styles //\nconst Style = StyleSheet.create ({\n\n\n    // Topic Component //\n\n    topicMain: {\n        alignSelf: 'flex-start', \n        backgroundColor: \"#202020\", \n        padding: 6\n    },\n        topicText: {\n            fontSize: 11, \n            textAlign: \"left\",\n            color: 'grey'\n        },\n\n\n    // Spot Component //\n\n    spotMain: {\n        width: '100%', \n        marginTop: 8,\n        padding: 12,\n        backgroundColor: \"#707070\",\n        flexDirection: 'row'\n    },\n        spotDescription: {\n            flex: 1, \n            alignItems: \"left\"\n        },\n            spotTitle: {\n                color: \"#EEEEEE\", \n                fontSize: 30, \n                fontWeight: 200, \n                marginBottom: 4\n            },\n            spotSub: {\n                color: \"#101010\", \n                fontSize: 16, \n                fontWeight: 300, \n                lineHeight: 20, \n                marginBottom: 14\n            },\n            spotArrowView: {\n                width: 30, \n                height: \"100%\", \n                padding: 4\n            },\n                spotArrow: {\n                    fontSize: 34,\n                    fontWeight: \"800\"\n                },\n\n})\n\nexport default Spot;\n","import React, {useState} from 'react';\nimport {View, Text, TextInput, TouchableOpacity, StyleSheet} from 'react-native';\n\n// Add Spot Button component //\nexport const AddButton = (props) => {\n    return (\n        <TouchableOpacity \n            style={Style.addButton}\n            onPress={props.handlePress}>\n                <Text style={Style.addButtonIcon}>+</Text>\n                <Text style={Style.addButtonText}>New Spot</Text>\n        </TouchableOpacity> \n    )\n};\n\n// Cancel Button component //\nconst CancelButton = (props) => {\n    return (\n        <TouchableOpacity \n            style={Style.cancelButton}\n            onPress={props.handlePress}>\n                <Text style={Style.cancelButtonIcon}>x</Text>\n                <Text style={Style.cancelButtonText}>Cancel</Text>\n        </TouchableOpacity>\n    )\n};\n\n// Next Button component //\nconst NextButton = (props) => {\n    return (\n        <TouchableOpacity \n            style={Style.nextButton}\n            onPress={props.handlePress}>\n                <Text style={Style.nextButtonIcon}>⌍</Text>\n                <Text style={Style.nextButtonText}>Next</Text>\n        </TouchableOpacity>\n    )\n};\n\n// Done Button component //\nconst DoneButton = (props) => {\n    return (\n    <TouchableOpacity \n        style={Style.doneButton}\n        onPress={props.handlePress}>\n            <Text style={Style.doneButtonIcon}>✓</Text>\n            <Text style={Style.doneButtonText}>Done</Text>\n    </TouchableOpacity>\n    )\n};\n\n// Add Title component with Input and Cancel/Next Buttons //\nexport const SpotTitle = (props) => {\n    return (\n        <View style={Style.addMain}>\n            <TextInput \n                style={Style.titleInput} \n                placeholder=\"Add a title...\"\n                onChangeText={props.changeText}\n                value={props.value}/>\n            <CancelButton\n                handlePress={props.handleCancel} />\n            <NextButton \n                handlePress={props.handleNext} />\n        </View>\n    )\n};\n\n// Add Description component with Input and Cancel/Next Buttons //\nexport const SpotDescription = (props) => {\n    return (\n        <View style={Style.addMain}>\n            <TextInput \n                style={Style.descriptionInput} \n                placeholder=\"Add a description...\"\n                onChangeText={props.changeText}\n                value={props.value}/>                \n            <CancelButton\n                handlePress={props.handleCancel} />\n            <NextButton \n                handlePress={props.handleNext} />\n        </View>\n    )\n};\n\n// Add Topic component with Input and Cancel/Next Buttons //\nexport const SpotTopic = (props) => {\n    return (\n        <View style={Style.addMain}>\n            <TextInput \n                style={Style.topicInput} \n                placeholder=\"Add a topic...\"\n                onChangeText={props.changeText}\n                value={props.value}/>\n            <CancelButton\n                handlePress={props.handleCancel} />\n            <DoneButton \n                handlePress={props.handleDone} />\n        </View>\n    )\n};\n\n\n// Styles //\nconst Style = StyleSheet.create({\n\n        addButton: {\n            justifyContent: 'center', \n            alignItems: 'center', \n            width: 55, \n            height: 55, \n            backgroundColor: \"grey\", \n            padding: 4,\n            marginRight: 2\n        },\n            addButtonIcon: {\n                fontSize: 38, \n                lineHeight: 34,\n                fontWeight: 300,\n                marginTop: 8\n            }, \n            addButtonText: {\n                fontSize: 9, \n                marginBottom: 14, \n                fontWeight: 500\n            },\n            addMain: {\n                flex: 1,\n                flexDirection: 'row',\n                alignContent: 'stretch',\n                height: 55, \n                backgroundColor: 'grey'\n            },\n                titleInput: {\n                    width: '100%',\n                    padding: 14, \n                    fontSize: 26, \n                    fontWeight: 300\n                },\n                descriptionInput: {\n                    width: '100%',\n                    padding: 14, \n                    fontSize: 18, \n                    fontWeight: 300\n                },\n                topicInput: {\n                    width: '100%',\n                    padding: 14, \n                    fontSize: 16, \n                    fontWeight: 300\n                },\n\n            cancelButton: {\n                width: 55, \n                height: 55, \n                justifyContent: 'center', \n                alignItems: 'center',\n                backgroundColor: '#505050'\n            },\n                cancelButtonIcon: {\n                    fontSize: 28, \n                    fontWeight: 400, \n                    color: 'white', \n                    lineHeight: 30, \n                    marginBotton: 46\n                },\n                cancelButtonText: {\n                    fontSize: 9, \n                    fontWeight: 700, \n                    color: 'white', \n                    lineHeight: 12\n                },\n            \n            nextButton: {\n                width: 55, \n                height: 55, \n                padding: 2, \n                alignItems: 'flex-end', \n                backgroundColor: 'lightgrey'\n            },\n                nextButtonIcon: { \n                    fontSize: 40, \n                    lineHeight: 34, \n                    fontWeight: 600, \n                    marginRight: 4\n                },\n                nextButtonText: {\n                    fontSize: 9, \n                    fontWeight: 700,\n                    marginRight: 14,\n                },\n\n            doneButton: {\n                width: 55, \n                height: 55, \n                padding: 2, \n                alignItems: 'center', \n                justifyContent: 'center',\n                backgroundColor: 'lightgrey'\n            },\n                doneButtonIcon: { \n                    fontSize: 24, \n                    lineHeight: 26, \n                    fontWeight: 700,\n                    marginTop: 2 \n                },\n                doneButtonText: {\n                    fontSize: 10, \n                    fontWeight: 600\n                    }\n\n})\n","import React, {useState, useEffect} from 'react';\nimport {View, Text, StyleSheet, FlatList, TouchableOpacity} from 'react-native';\nimport Spot from '../Components/Spot.js';\nimport {AddButton, SpotTitle, SpotDescription, SpotTopic} from '../Components/AddSpot.js'\n\n// Backend Spots query endpoint //\nconst url = \"https://x8ki-letl-twmt.n7.xano.io/api:i1afkiPC\";\nconst chatrooms = \"/chatrooms\";\n\n// Channel list on Channel screen //\nconst Channels = ({route, navigation}) => {\n    const [spotList, setSpotList] = useState(null);\n    const [inputErrorMsg, setInputErrorMsg] = useState(null);\n    const [fetchErrorMsg, setFetchErrorMsg] = useState(null);\n    const [showTitle, setShowTitle] = useState(false);\n    const [showDescription, setShowDescription] = useState(false);\n    const [showTopic, setShowTopic] = useState(false);\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [topic, setTopic] = useState(\"\");\n    const {toSpot} = route.params;\n\n    // Logic to navigate directly to Spot's spot when called from chat //\n    if (toSpot === true) {\n        navigation.navigate(\"Chat\", {id: 1})\n    };\n\n    // Fetching Spot List once on first render //\n    useEffect(() => {\n        fetchSpots();\n    }, []);\n\n    // Backend call to fetch Spots' list //\n    const fetchSpots = async () => {\n        const endpoint = `${url}${chatrooms}`;\n        try {\n            const response = await fetch(endpoint, {\n                method : \"GET\",\n                headers: {\n                    \"accept\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                }\n            })\n            if (response.ok) {\n                const jsonResponse = await response.json();\n                renderResponseSpotList(jsonResponse);\n            } else {\n                const errorMessage = await response.json();\n                setFetchErrorMsg(errorMessage.message)\n            }\n        }\n        catch (error) {\n            console.log(error);\n        }\n    };\n\n    // Backend call to send input data and create new Spot//\n    const addSpot = async () => {\n        if (title && description && topic !== \"\") {\n            const endpoint = `${url}${chatrooms}`;\n            const data = JSON.stringify({\"title\": title, \"description\": description, \"topic\": topic});\n            try {\n                const response = await fetch(endpoint, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${token}`\n                    },\n                    body: data\n                })\n                if (response.ok) {\n                    const jsonResponse = await response.json();\n                    renderResponseAddSpot(jsonResponse);\n                } else {\n                    console.log(\"There's been an error\");\n                };\n            }\n            catch (error) {\n                console.log(error);\n            } \n        }\n    };\n\n\n    // Handling Backend responses //\n    const renderResponseSpotList = (response) => {\n        setSpotList(response.items);\n    };\n\n    const renderResponseAddSpot = (response) => {\n        const newSpotId = response.chatroom.id;\n        fetchSpots();\n        navigation.navigate(\"Chat\", {id: newSpotId});\n    };\n\n\n    // Managing Spot Adding visibility //\n    const handleShowTitle = () => {\n        setShowTitle(true);\n    };\n\n    const handleShowDescription = () => {\n        if (title !== \"\") {\n            setShowTitle(false);\n            setShowDescription(true);\n            setInputErrorMsg(\"\");\n        } else {\n            setInputErrorMsg(\"All fields must be completed\")\n        }\n    };\n        \n    const handleShowTopic = () => {\n        if (description !== \"\") {\n            setShowDescription(false);\n            setShowTopic(true);\n            setInputErrorMsg(\"\");\n        } else {\n            setInputErrorMsg(\"All fields must be completed\")\n        }\n    };\n\n    // Managing Cancel buttons on input fields //\n    const handleCancelTitle = () => {\n        setShowTitle(false);\n        setInputErrorMsg(\"\");\n    };\n\n    const handleCancelDescription = () => {\n        setShowDescription(false);\n        setInputErrorMsg(\"\");\n    };\n\n    const handleCancelTopic = () => {\n        setShowTopic(false);\n        setInputErrorMsg(\"\");\n    };\n\n    // Final step sending data to backend //\n    const newSpotDone = () => {\n        if (topic !== \"\") {\n            setShowTopic(false);\n            setInputErrorMsg(\"\");\n            addSpot();\n        } else {\n            setInputErrorMsg(\"All fields must be completed\")\n        }\n    };\n\n    // Handling user Logging out //\n    const handleLogout = () => {\n        token = \"\";\n        navigation.navigate(\"Login\");\n    };\n\n    // Flatlist RenderItem element //\n    const renderItem = ({item}) => (\n        <Spot\n            title={item.title}\n            subtitle={item.description}\n            topic={item.topic}\n            destination={() => navigation.navigate(\"Chat\", {id: item.id})}\n        />\n    );\n\n    // Rendering Spot List Screen //\n    return (\n        <View style={Style.main}>\n            <View style={Style.topView}>\n                <Text style={Style.title}>Spots</Text>\n                <TouchableOpacity \n                    style={Style.logoutButton}\n                    onPress={handleLogout}>\n                        <Text style={Style.logoutText}>Logout</Text>\n                </TouchableOpacity>\n            </View>\n            {spotList !== null? \n                <FlatList\n                    style={Style.flatList}\n                    data={spotList}\n                    renderItem={renderItem}\n                    keyExtractor={item => item.id}/> : null}\n            <View style={Style.addMain}>\n                <Text style={Style.errorMessage}>{inputErrorMsg}</Text>\n                <View style={Style.addSpotMain}>\n                    <AddButton \n                        handlePress={handleShowTitle}/>\n                    {showTitle === true ? \n                        <SpotTitle\n                            handleCancel={handleCancelTitle}\n                            handleNext={handleShowDescription} \n                            changeText={setTitle}\n                            value={title} /> : null}\n                    {showDescription ? \n                        <SpotDescription \n                            handleCancel={handleCancelDescription}\n                            handleNext={handleShowTopic}\n                            changeText={setDescription}\n                            value={description} /> : null}\n                    {showTopic ? \n                        <SpotTopic \n                            handleCancel={handleCancelTopic} \n                            handleDone={newSpotDone}\n                            changeText={setTopic}\n                            value={topic} /> : null}\n                </View>\n            </View>\n        </View>\n    )\n};\n\n\n// Styles //\nconst Style = StyleSheet.create ({\n\n    addMain: {\n        width: '100%', \n        height: 65, \n        alignItems: 'center',\n        justifyContent: 'flex-end'\n    },\n    errorMessage: {\n        fontSize: 11, \n        color: 'red', \n        fontStyle: \"italic\", \n        marginBottom: 4\n    },\n    addSpotMain: {\n        flexDirection: 'row', \n        width: '100%', \n        height: 55,\n    },\n\n    main: {\n        flex: 1, \n        backgroundColor: 'black', \n        width: '100%', \n        height: '100%', \n        padding: 16\n        },\n        topView: {\n            flexDirection: 'row', \n            justifyContent: 'space-between', \n            alignItems: 'center'\n        },\n            title: {\n                color: 'white', \n                fontSize: 48, \n                fontWeight: 200,\n                marginBottom: 16\n            },\n            logoutButton: {\n                backgroundColor: 'grey', \n                padding: 8, \n                height: 35, \n                marginBottom: 6\n            },\n                logoutText: {\n                    color: 'white'\n                },\n        flatList: {\n            marginBottom: 12\n        },\n\n})\n\nexport default Channels;\n","import { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport Chat from './Screens/Chat.js';\nimport Login from './Screens/Login.js';\nimport Signup from './Screens/Signup.js';\nimport Channels from './Screens/Channels.js';\nimport Verify from './Screens/Verify.js';\n\nconst Stack = createNativeStackNavigator();\nconst App = () => {\n  return (\n    <NavigationContainer >\n      <Stack.Navigator initialRouteName=\"Login\" screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"Login\" component={Login} />\n        <Stack.Screen name=\"Signup\" component={Signup} />\n        <Stack.Screen name=\"Verify\" component={Verify} />\n        <Stack.Screen name=\"Channels\" component={Channels} />\n        <Stack.Screen name=\"Chat\" component={Chat} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}